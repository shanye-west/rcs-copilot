/// <reference types="@sveltejs/kit" />
/// <reference no-default-lib="true"/>
/// <reference lib="es2020" />
/// <reference lib="webworker" />

const sw = self as unknown as ServiceWorkerGlobalScope;

import { build, files, version } from '$service-worker';

// Create cache names for different types of assets
const CACHE_NAMES = {
  static: `static-cache-${version}`,
  pages: `pages-cache-${version}`,
  images: `images-cache-${version}`,
  api: `api-cache-${version}`
};

// Static assets to cache immediately on install
const STATIC_ASSETS = [
  ...build, // JS and CSS files generated by SvelteKit
  ...files  // Files from static directory
].filter(file => !file.includes('/.') && !file.endsWith('.DS_Store'));

// Install event - cache initial assets
sw.addEventListener('install', (event) => {
  event.waitUntil(
    (async () => {
      const staticCache = await caches.open(CACHE_NAMES.static);
      await staticCache.addAll(STATIC_ASSETS);
      
      // Skip waiting to activate the new service worker immediately
      await sw.skipWaiting();
    })()
  );
});

// Activate event - clean up old caches
sw.addEventListener('activate', (event) => {
  event.waitUntil(
    (async () => {
      // Get all cache names
      const cacheNames = await caches.keys();
      
      // Filter for old caches
      const oldCacheNames = cacheNames.filter((name) => {
        return Object.values(CACHE_NAMES).indexOf(name) === -1;
      });
      
      // Delete old caches
      await Promise.all(oldCacheNames.map(name => caches.delete(name)));
      
      // Take control of all clients
      await sw.clients.claim();
    })()
  );
});

// Helper function to determine if a request is an API call
function isApiRequest(request: Request): boolean {
  const url = new URL(request.url);
  return url.pathname.startsWith('/api/');
}

// Helper function to determine if a navigation request
function isNavigationRequest(request: Request): boolean {
  return request.mode === 'navigate';
}

// Helper function to determine if an asset request
function isAssetRequest(request: Request): boolean {
  const url = new URL(request.url);
  return STATIC_ASSETS.includes(url.pathname);
}

// Helper function for image requests
function isImageRequest(request: Request): boolean {
  return request.destination === 'image';
}

// Fetch event - respond with cached resources or network
sw.addEventListener('fetch', (event) => {
  const request = event.request;
  
  // Skip non-GET requests
  if (request.method !== 'GET') return;
  
  event.respondWith(
    (async () => {
      // Static assets - Cache First strategy
      if (isAssetRequest(request)) {
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
          return cachedResponse;
        }
        
        // If not in cache, fetch from network and cache
        const response = await fetch(request);
        if (response.ok) {
          const cache = await caches.open(CACHE_NAMES.static);
          cache.put(request, response.clone());
        }
        return response;
      }
      
      // Navigation requests - Network First with fallback
      if (isNavigationRequest(request)) {
        try {
          // Try network first
          const response = await fetch(request);
          
          // Cache successful responses
          if (response.ok) {
            const cache = await caches.open(CACHE_NAMES.pages);
            cache.put(request, response.clone());
          }
          
          return response;
        } catch (error) {
          // If network fails, try cache
          const cachedResponse = await caches.match(request);
          if (cachedResponse) {
            return cachedResponse;
          }
          
          // If no cached version, return the offline fallback page
          return caches.match('/offline');
        }
      }
      
      // API requests - Network First but don't cache posts
      if (isApiRequest(request)) {
        try {
          // Try network first
          const response = await fetch(request);
          return response;
        } catch (error) {
          // Offline fallback - let the app handle offline state
          // (using IndexedDB for offline data)
          return new Response(
            JSON.stringify({ 
              error: 'offline',
              message: 'You are currently offline. Data will be synced when reconnected.'
            }),
            { 
              status: 503,
              headers: { 'Content-Type': 'application/json' }
            }
          );
        }
      }
      
      // Images - Cache First with network fallback
      if (isImageRequest(request)) {
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
          return cachedResponse;
        }
        
        try {
          const response = await fetch(request);
          if (response.ok) {
            const cache = await caches.open(CACHE_NAMES.images);
            cache.put(request, response.clone());
          }
          return response;
        } catch (error) {
          // Return a placeholder image or just fail
          return new Response('Image not available offline', { status: 503 });
        }
      }
      
      // Default - try network, don't cache
      return fetch(request);
    })()
  );
});
